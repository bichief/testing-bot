from aiogram import types
from aiogram.dispatcher.filters import Command, Text
from aiogram.utils.exceptions import BotBlocked

from keyboards.inline.admin_final import admin_final_menu
from keyboards.inline.admin_menu import menu
from keyboards.inline.categories_keyboard import categories_keyboard, edited_categories_keyboard
from keyboards.inline.groups_keyboard import groups_keyboard
from keyboards.inline.lessons_keyboard import lesson_keyboard
from keyboards.inline.start_testing_students import go_test
from loader import dp
from states.start_student_test import StartTesting
from utils.db_api.db_commands import get_all_groups, update_tests_group, get_lessons, update_tests_lesson, \
    get_categories, update_category, get_categories_test, delete_test_row, get_test_teacher_id, get_students_group, \
    get_all_categories, add_questions_test


@dp.message_handler(Command('admin'))
async def admin_cmd(message: types.Message):
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é!\n\n'
                         '–í –Ω–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –≥—Ä—É–ø–ø–∞–º, –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, '
                         '–æ—Ç–Ω–æ—Å—è—â–∏–º—Å—è –∫ –í–∞—à–µ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ.', reply_markup=menu)


@dp.callback_query_handler(Text(equals='go_admin'))
async def admin_call(call: types.CallbackQuery):
    await call.message.edit_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é!\n\n'
                                 '–í –Ω–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –≥—Ä—É–ø–ø–∞–º, –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º '
                                 '–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –æ—Ç–Ω–æ—Å—è—â–∏–º—Å—è –∫ –í–∞—à–µ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ.', reply_markup=menu)


@dp.callback_query_handler(Text(equals='go_test'))
async def select_current_group(call: types.CallbackQuery):
    groups = await get_all_groups()
    keyboard = await groups_keyboard(groups=groups)
    await delete_test_row(call.from_user.id)
    await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—É:', reply_markup=keyboard)


@dp.callback_query_handler(Text(startswith='group'))
async def get_admin_group(call: types.CallbackQuery):
    await delete_test_row(call.from_user.id)
    group = call.data.split('_')[1]
    await update_tests_group(group=group, telegram_id=call.from_user.id)

    lessons = await get_lessons()
    keyboard = await lesson_keyboard(lessons)
    await call.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –≥—Ä—É–ø–ø—ã {group}:', reply_markup=keyboard)


@dp.callback_query_handler(Text(startswith='lesson'))
async def get_admin_lesson(call: types.CallbackQuery):
    lesson = call.data.split('_')[1]
    await update_tests_lesson(lesson=lesson, telegram_id=call.from_user.id)

    keyboard = await categories_keyboard(lesson)

    await call.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã <b>{lesson}</b>',
                                 reply_markup=keyboard)


@dp.callback_query_handler(Text(endswith='true'))
async def change_state_category(call: types.CallbackQuery):
    category = call.data.split('_')[1]
    lesson = await update_category(telegram_id=call.from_user.id, category=category)
    keyboard = await edited_categories_keyboard(category_true=category, lesson=lesson)

    data = await get_categories_test(call.from_user.id)

    categories = data.split(" ")

    await call.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã <b>{lesson}</b>\n\n'
                                 f'–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <b>{" ".join(categories)}</b>',
                                 reply_markup=keyboard)


@dp.callback_query_handler(Text(equals='check'))
async def pre_check_test(call: types.CallbackQuery):
    data = await get_test_teacher_id(call.from_user.id)
    categories = data.categories.split(" ")
    del categories[0]
    await add_questions_test(categories, call.from_user.id)
    good_categories = await get_all_categories(categories)

    await call.message.edit_text(f'–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {data.group}\n'
                                 f'–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {data.lesson}\n\n'
                                 f'–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {" ".join(good_categories)}\n\n'
                                 f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:</b>', reply_markup=admin_final_menu)


@dp.callback_query_handler(Text(equals='start_test'))
async def start_testing(call: types.CallbackQuery):
    data = await get_test_teacher_id(call.from_user.id)
    students = await get_students_group(data.group)
    keyboard = await go_test(test_id=data.id)

    await call.message.edit_text('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–æ!\n'
                                 '–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
    for i in range(len(students)):
        state = dp.current_state(chat=students[i].telegram_id, user=students[i].telegram_id)
        await state.set_state(StartTesting.test.state)

        await state.update_data(
            {
                'array_questions': data.questions,
                'teacher_id': call.from_user.id
            }

        )

        try:
            await dp.bot.send_message(
                chat_id=students[i].telegram_id,
                text=f'üëã –ù–∞—á–∞–ª–æ—Å—å –Ω–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã <b>{data.group}</b>!\n'
                     f'üë®‚Äçüíª –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ - {data.lesson}\n\n'
                     f'‚úç –ù–∞–∂–º–∏Ô∏è –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–µ—à–µ–Ω–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤\n'
                     f'ü§û –£–¥–∞—á–∏!',
                reply_markup=keyboard
            )
        except BotBlocked:
            await call.message.answer(f'‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–æ {students[i].name}')
